@inject IDialogService DialogService
@inject ISerieService SerieService
@inject ICategoryService CategoryService

<div class="pa-4">
    <MudTable Items="@Games" Hover="true" Striped="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<SimpleGame,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@Options.Title</MudText>
            <MudTooltip Text="Recharger les jeux">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="ForceReloadGames" />
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTextField T="string" @bind-Value="@_searchGame" Label="Nom" Immediate="true" Placeholder="Final Fantasy"></MudTextField>
            </MudTh>
            @if (Options.HasColumnPlatform)
            {
                <MudTh>
                    Platform
                </MudTh>
            }
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nom">@context.Name</MudTd>
            @if (Options.HasColumnPlatform)
            {
                <MudTd DataLabel="Platform">@context.Platform</MudTd>
            }
            <MudTd>
                <MudTooltip Text="Ajouter à la bibliothèque">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="(_) => InvokeAddGame(context)" />
                </MudTooltip>
            </MudTd>
            <MudTd>
                <MudTooltip Text="Ignorer">
                    <MudIconButton Icon="@Icons.Material.Filled.VideogameAssetOff" OnClick="(_) => InvokeIgnoreGame(context)" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

@code {

    [Parameter]
    public List<SimpleGame> Games { get; set; } = [];
    [Parameter]
    public required SimpleGamesComponentOptions Options { get; set; }
    [Parameter]
    public EventCallback<CreateSimpleGame> AddGame { get; set; }
    [Parameter]
    public EventCallback<SimpleGame> IgnoreGame { get; set; }
    [Parameter]
    public EventCallback<bool> LoadGame { get; set; }

    private List<CategoryDto> _categories = [];
    private List<SimpleSerieDto> _simpleSeries = [];

    private DialogOptions DialogOptions { get; set; } = new() 
    { 
        CloseButton = true,
        FullWidth = true
    };
    private bool _loading;
    private string _searchGame = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var getAllCategoriesResult = CategoryService.GetAllCategories(CancellationToken);
        var getAllSeriesResult = SerieService.GetAllSeries(CancellationToken);

        await Task.WhenAll(getAllCategoriesResult, getAllSeriesResult, LoadGame.InvokeAsync(false));

        if (getAllCategoriesResult.Result.IsSucceed && getAllSeriesResult.Result.IsSucceed)
        {
            _categories = getAllCategoriesResult.Result.Result!;
            _simpleSeries = getAllSeriesResult.Result.Result!;
            _loading = false;
        }
    }

    private async Task ForceReloadGames()
    {
        _loading = true;
        await LoadGame.InvokeAsync(true);
        _loading = false;
    }

    private async Task InvokeAddGame(SimpleGame game)
    {
        var dialogParameters = new DialogParameters<GameToLoadCreationDialog>
        {
            { x => x.PlatformEnum, game.Platform },
            { x => x.Categories, _categories },
            { x => x.Series, _simpleSeries }
        };
        var dialogReference = await DialogService.ShowAsync<GameToLoadCreationDialog>("Ajout", dialogParameters, DialogOptions);
        var response = await dialogReference.Result;
        if (!response!.Canceled)
        {
            _loading = true;
            var gameToLoad = (GameToLoad?)response.Data;
            await AddGame.InvokeAsync(new CreateSimpleGame { GameToLoad = gameToLoad, Game = game });
            Games.Remove(game);
            _loading = false;
        }
    }

    private async Task InvokeIgnoreGame(SimpleGame game)
    {
        _loading = true;
        await IgnoreGame.InvokeAsync(game);
        Games.Remove(game);
        _loading = false;
    }

    private bool FilterFunc(SimpleGame game)
    {
        if (string.IsNullOrWhiteSpace(_searchGame))
            return true;
        if (game.Name.Contains(_searchGame, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
