@inject IDialogService DialogService

<MudTable Items="@Elements" Hover="true" Striped="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<SimpleTableElement,bool>(FilterFunc)">
    <ToolBarContent>
        <MudGrid>
            <MudItem xs="11">
                <MudText Typo="Typo.h6">@Title</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="InvokeAddElement" />
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            Nom
            <MudTextField T="string" @bind-Value="@_searchElement" Immediate="true" Placeholder="Final Fantasy"></MudTextField>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nom">@context.Name</MudTd>
        <MudTd>
            @if (context.CanBeDeleted)
            {
                <MudTooltip Text="Supprimer">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(_) => InvokeDeleteElement(context)" />
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Parameter]
    public List<SimpleTableElement> Elements { get; set; } = [];
    [Parameter]
    public required string Title { get; set; }
    [Parameter]
    public EventCallback<SimpleTableElement> DeleteElement { get; set; }
    [Parameter]
    public EventCallback AddElement { get; set; }
    [Parameter]
    public EventCallback LoadElements { get; set; }

    private bool _loading;
    private string _searchElement = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        _loading = true;
        await LoadElements.InvokeAsync();
        _loading = false;
    }

    private async Task InvokeDeleteElement(SimpleTableElement element)
    {
        await DeleteElement.InvokeAsync(element);
        Elements.Remove(element);
    }

    private async Task InvokeAddElement()
    {
        await AddElement.InvokeAsync();
        await LoadPage();
    }

    private bool FilterFunc(SimpleTableElement element)
    {
        if (string.IsNullOrWhiteSpace(_searchElement))
            return true;
        if (element.Name.Contains(_searchElement, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
