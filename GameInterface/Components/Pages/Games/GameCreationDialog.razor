@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudDialog>
    <DialogContent>
        <MudForm Model="_createGame" @ref="_form">
            <MudTextField Class="pa-2" @bind-Value="_createGame.Name" Immediate="true" Label="Nom" />
            <MudAutocomplete Class="pa-2" @bind-Value="_createGame.Serie" Label="Série" SearchFunc="@SearchSerie" Clearable="true" ResetValueOnEmptyText="true"/>
            <MudSelect Class="pa-2" @bind-Value="_createGame.Platform" Label="Platform">
                @foreach (var platform in Platforms)
                {
                    <MudSelectItem Value="platform">@platform.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Class="pa-2" @bind-SelectedValues="_createGame.Categories" Label="Categories" MultiSelection="true">
                @foreach (var category in Categories)
                {
                    <MudSelectItem Value="category">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Class="pa-2" @bind-Value="_createGame.Status" Label="Status" Clearable="true" Placeholder="Fini">
                @foreach (var gameDetailStatus in Enum.GetValues(typeof(GameDetailStatusEnumDto)).Cast<GameDetailStatusEnumDto?>())
                {
                    <MudSelectItem Value="gameDetailStatus">@gameDetailStatus!.GetDescription()</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Créer</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }
    [Parameter]
    public List<PlatformDto> Platforms { get; set; } = [];
    [Parameter]
    public List<CategoryDto> Categories { get; set; } = [];
    [Parameter]
    public List<SimpleSerieDto> Series { get; set; } = [];

    private MudForm? _form;
    private CreateGameDto _createGame = new()
    {
        Status = GameDetailStatusEnumDto.NotStarted
    };

    private async Task<IEnumerable<SimpleSerieDto?>> SearchSerie(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return await Task.FromResult(new List<SimpleSerieDto>());

        return await Task.FromResult(Series.Where(x => x.Serie.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private void Submit() => MudDialog?.Close(DialogResult.Ok(_createGame));

    private void Cancel() => MudDialog?.Cancel();
}
