@page "/games/{GameId:guid}"

@inject ICategoryService CategoryService
@inject IGameService GameService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IPlatformService PlatformService
@inject ISteamService SteamService
@inject IPlaystationService PlaystationService
@inject ISerieService SerieService
@inject IXboxService XboxService
@inject IGoalService GoalService
@inject NavigationManager NavigationManager

<MudForm Model="_updateGame" @ref="_form">
    <MudGrid class="pa-4">
    
        @if (!_editMode)
        {
            <MudItem xs="11" />
            <MudItem xs="1">
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Label="Actions">
                    <MudButton OnClick="() => _editMode = !_editMode">Modifier</MudButton>
                    <MudButton OnClick="AddPlatform">Ajouter une platform</MudButton>
                </MudMenu>
            </MudItem>
        }
        <MudItem xs="12">
            <MudPaper Elevation="2">
                @if (!_editMode)
                {
                    <MudText Align="Align.Center" Typo="Typo.h5">@_game?.Name</MudText>
                    @if (@_game?.Serie?.Serie is not null)
                    {
                        <MudLink Class="pa-4" Align="Align.Inherit" Href="@($"/games/series/{_game.Serie.Serie}")">@_game.Serie.Serie</MudLink>
                    }
                    
                    <MudList T="CategoryDto">
                        @if (@_game?.Categories.Count() > 0)
                        {
                            @foreach (var category in @_game!.Categories)
                            {
                                <MudListItem Text="@category.Name" />
                            }
                        }
                        else
                        {
                            <MudListItem Text="Aucune catégorie"></MudListItem>
                        }
                    </MudList>
                }
                else
                {

                    <MudTextField Class="pa-2" @bind-Value="_updateGame.Name" Immediate="true" Label="Nom" />
                    <MudTextField Class="pa-2" @bind-Value="_updateGame.HowLongToBeatName" Immediate="true" Label="Nom HowLongToBeat" />
                    <MudAutocomplete Class="pa-2" @bind-Value="_updateGame.Serie" Label="Série" SearchFunc="@SearchSerie" Clearable="true" ResetValueOnEmptyText="true" />
                    <MudSelect Class="pa-2" @bind-SelectedValues="_updateGame.Categories" Label="Categories" MultiSelection="true">
                        @foreach (var category in _categories)
                        {
                            <MudSelectItem Value="category">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateTimes">Mettre à jour les temps</MudButton>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudTabs>
                    @foreach (var gameDetail in _game?.GameDetails ?? [])
                    {
                        <MudTabPanel Text="@gameDetail.PlatformAndPercentage">
                            <MudGrid>
                                <MudItem xs="10">
                                    @if (!_editMode)
                                    {
                                        <MudChip T="string" Color="@gameDetail.Status.ToColor()">@gameDetail.Status.GetDescription()</MudChip>
                                    }
                                    else
                                    {
                                        <MudSelect T="GameDetailStatusEnumDto" Class="pa-2" @bind-value="gameDetail.Status" Label="Status">
                                            @foreach (var gameDetailStatus in GameDetailStatusEnumExtensions.OrderedStatus)
                                            {
                                                <MudSelectItem Value="gameDetailStatus">@gameDetailStatus.GetDescription()</MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                </MudItem>
                                <MudItem xs="2">
                                    <MudTooltip Text="Supprimer la platform">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(_) => DeleteGameById(gameDetail)" />
                                    </MudTooltip>
                                    @if (gameDetail.Platform.PlatformEnum.HasValue)
                                    {
                                        <MudTooltip Text="Recharger les succès">
                                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="(_) => RefreshGame(gameDetail)" />
                                        </MudTooltip>
                                    }
                                    <MudTooltip Text="Ajouter un objectif">
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="(_) => AddGoal(gameDetail)" />
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                            <MudList T="GameDetailDto">
                                @if (gameDetail.Achievements.Count() > 0)
                                {
                                    <MudListItem Text="Succès">
                                        <NestedList>
                                            @foreach (var achievement in gameDetail.Achievements)
                                            {
                                                <MudListItem>
                                                    <MudGrid>
                                                        <MudItem xs="9" Style="display: flex; align-items: center">
                                                            <MudTooltip Text="@achievement.Description">
                                                                <MudText>@achievement.PercentageAndName</MudText>
                                                            </MudTooltip>
                                                        </MudItem>
                                                        <MudItem xs="3">
                                                            <MudCheckBox @bind-Value="@achievement.Achieved" Disabled="gameDetail.Platform.PlatformEnum.HasValue"></MudCheckBox>
                                                        </MudItem>
                                                    </MudGrid>
                                                </MudListItem>
                                            }
                                        </NestedList>
                                    </MudListItem>
                                }
                                else
                                {
                                    <MudListItem Text="Pas de succès" />
                                }

                                @if (gameDetail.Goals.Count() > 0)
                                {
                                    <MudListItem Text="Objectifs">
                                        <NestedList>
                                            @foreach (var goal in gameDetail.Goals)
                                            {
                                                <MudListItem>
                                                    <MudGrid>
                                                        <MudItem xs="9" Style="display: flex; align-items: center">
                                                            <MudText>@goal.Name</MudText>
                                                        </MudItem>
                                                        <MudItem xs="3">
                                                            <MudCheckBox T="bool" Value="@goal.Achieved" ValueChanged="(isChecked) => OnGoalCheckedChanged(goal, isChecked)"></MudCheckBox>
                                                        </MudItem>
                                                    </MudGrid>
                                                </MudListItem>
                                            }
                                        </NestedList>
                                    </MudListItem>
                                }
                                else
                                {
                                    <MudListItem Text="Pas d'objectifs">

                                    </MudListItem>
                                }

                            </MudList>
                        </MudTabPanel>
                    }
                </MudTabs>
            </MudPaper>
        </MudItem>
        @if (_editMode)
        {
            <MudItem xs="9" />
            <MudItem xs="3">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" OverrideStyles="false">
                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => _editMode = !_editMode">Annuler</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Sauver</MudButton>
                </MudButtonGroup>
            </MudItem>
        }
      
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public Guid GameId { get; set; }

    private UpdateGameDto _updateGame = new();
    private MudForm? _form;
    private List<CategoryDto> _categories = [];
    private List<SimpleSerieDto> _series = [];
    private List<PlatformDto>? _platforms;
    private GameDto? _game;
    private bool _editMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        var getAllCategoriesResult = CategoryService.GetAllCategories(CancellationToken);
        var getAllSeriesResult = SerieService.GetAllSeries(CancellationToken);
        var getGameByIdResult = GameService.GetGameById(CancellationToken, GameId);

        await Task.WhenAll(getAllCategoriesResult, getGameByIdResult, getAllSeriesResult);

        if (getAllCategoriesResult.Result.IsSucceed && getGameByIdResult.Result.IsSucceed && getAllSeriesResult.Result.IsSucceed)
        {
            _categories = getAllCategoriesResult.Result.Result!;
            _series = getAllSeriesResult.Result.Result!;
            _game = getGameByIdResult.Result.Result!;
            _updateGame = new()
            {
                Id = _game.Id,
                Name = _game.Name,
                HowLongToBeatName = _game.HowLongToBeatName,
                Serie = _series.FirstOrDefault(s => s.Id == _game.Serie?.Id),
                Categories = _categories.Where(c => _game.Categories.Select(ca => ca.Id).Contains(c.Id)),
                GameDetails = _game.GameDetails.Select(gd => new UpdateGameDetailDto { Id = gd.Id, Status = gd.Status })
            };
        }

    }

    private async Task ReloadPage(string? snackBarMessage = null)
    {
        if (snackBarMessage is not null)
            Snackbar.Add(snackBarMessage, Severity.Success);

        await LoadPage();
    }

    private async Task SaveChanges()
    {
        var updateGameResult = await GameService.UpdateGame(CancellationToken, GameId, _updateGame);
        if (updateGameResult.IsSucceed)
        {
            await ReloadPage($"Le jeu {_game!.Name} a bien été modifié");
            _editMode = false;
        }
    }

    private async void UpdateTimes()
    {
        var updateTimeResult = await GameService.UpdateGameTime(CancellationToken, GameId);
        if(updateTimeResult.IsSucceed)
        {
            await ReloadPage($"Les temps du jeu {_game!.Name} ont bien été modifié");
        }
    }

    private async Task DeleteGameById(GameDetailDto game)
    {
        var parameters = new DialogParameters<ValidationDialog>
        {
            { x => x.ContentText, _game!.GameDetails.Count() > 1 ? $"Êtes-vous sûr de vouloir supprimer la platform {game.Platform.Name} ?" : $"Êtes-vous sûr de vouloir supprimer le jeu {_game.Name} ?" },
            { x => x.ActionButtonText, "Supprimer" },
            { x => x.Color, Color.Error }
        };
        var dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = await DialogService.ShowAsync<ValidationDialog>("Suppression", parameters, dialogOptions);
        var response = await dialogReference.Result;

        if (!response!.Canceled)
        {
            var deleteGameResult = await GameService.DeleteGameById(CancellationToken, game.Id);

            if (deleteGameResult.IsSucceed)
            {
                if (_game!.GameDetails.Count() > 1)
                {
                    await ReloadPage($"La platform {game.Platform.Name} a bien été supprimée du jeu {_game.Name}");
                }
                else
                {
                    Snackbar.Add($"Le jeu {_game.Name} a bien été supprimé", Severity.Success);
                    NavigationManager.NavigateTo("/games");
                }
            }            
        }
    }

    private async Task AddGoal(GameDetailDto gameDetailDto)
    {
        var parameters = new DialogParameters<TextInputDialog>
        {
            { x => x.ContentText, $"Création d'un objectif" },
            { x => x.Label, "Objectif" }
        };
        var dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = await DialogService.ShowAsync<TextInputDialog>("Création", parameters, dialogOptions);
        var response = await dialogReference.Result;

        if (!response!.Canceled)
        {
            var goal = (string)response.Data!;
            var createGoalResult = await GoalService.CreateGoal(CancellationToken, gameDetailDto.Id, new() { Name = goal, GameDetailId = gameDetailDto.Id });
            if (createGoalResult.IsSucceed)
            {
                await ReloadPage($"L'objectif {goal} a bien été crée.");
            }
        }
    }

    private async Task OnGoalCheckedChanged(GoalDto goal, bool isChecked)
    {
        var result = await GoalService.UpdateAchievedGoal(CancellationToken, goal.Id, isChecked);

        if (result.IsSucceed)
            await ReloadPage("La modification de l'objectif a bien été effectuée.");
    }

    private async Task RefreshGame(GameDetailDto gameDetail)
    {
        var apiResult = gameDetail.Platform.PlatformEnum switch
        {
            PlatformEnumDto.Steam => await SteamService.ReloadSteamGame(CancellationToken, gameDetail.Id),
            PlatformEnumDto.Xbox360 or PlatformEnumDto.XboxOne => await XboxService.ReloadXboxGame(CancellationToken, gameDetail.Id),
            PlatformEnumDto.PS3 or PlatformEnumDto.PS4 or PlatformEnumDto.PS5 or PlatformEnumDto.PSVITA => await PlaystationService.ReloadPlaystationGame(CancellationToken, gameDetail.Id),
            _ => throw new NotImplementedException($"Refresh game for platform {gameDetail.Platform.Name} is not implemented.")
        };

        if (apiResult.IsSucceed)
        {
            await ReloadPage($"Les succès de la platform {gameDetail.Platform.Name} du jeu {_game!.Name} ont bien été rechargé");
        }
    }

    private async Task AddPlatform()
    {
        var noCallOrSucceed = true;
        if (_platforms is null)
        {
            var getAllPlatformsResult = await PlatformService.GetAllPlatforms(CancellationToken);
            noCallOrSucceed = getAllPlatformsResult.IsSucceed;
            if (getAllPlatformsResult.IsSucceed)
            {
                _platforms = getAllPlatformsResult.Result;
            }
        }

        if (noCallOrSucceed)
        {
            _platforms!.RemoveAll(p => _game!.GameDetails.Select(gd => gd.Platform.Id).Contains(p.Id));

            var parameters = new DialogParameters<SelectPlatformDialog>
            {
                { x => x.Platforms, _platforms }
            };
            var dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

            var dialogReference = await DialogService.ShowAsync<SelectPlatformDialog>("Ajout", parameters, dialogOptions);
            var response = await dialogReference.Result;

            if (!response!.Canceled)
            {
                var result = (PlatformDto)response!.Data!;
                var addPlatformToAGameResult = await GameService.AddPlatformToAGame(CancellationToken, GameId, result.Id);
                if (addPlatformToAGameResult.IsSucceed)
                {
                    await ReloadPage($"La platform {result.Name} a bien été ajoutée au jeu {_game!.Name}");
                }
            }
        }
    }

    private async Task<IEnumerable<SimpleSerieDto?>> SearchSerie(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return await Task.FromResult(new List<SimpleSerieDto>());

        return await Task.FromResult(_series.Where(x => x.Serie.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }
}
