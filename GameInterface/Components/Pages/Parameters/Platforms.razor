@page "/platforms"
@inject IPlatformService PlatformService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<ParameterElementsTableComponent Elements="Elements"
                              LoadElements="LoadPlatforms"
                              DeleteElement="DeletePlatform"
                              Title="@Title"
                              AddElement="AddPlatform">
</ParameterElementsTableComponent>

@code {
    private List<SimpleTableElement> Elements { get; set; } = [];
    private List<PlatformDto> PlatformDtos { get; set; } = [];
    private string Title { get; set; } = "Platforms";

    private async Task LoadPlatforms()
    {
        var getPlatformResult = await PlatformService.GetAllPlatforms(CancellationToken);
        if (getPlatformResult.IsSucceed)
        {
            PlatformDtos = getPlatformResult.Result!;
            Elements = PlatformDtos.Select(p => p.ToSimpleTableElement()).ToList();
        }
    }

    private async Task DeletePlatform(SimpleTableElement simpleElement)
    {
        var platform = FindPlatform(simpleElement);
        var deletePlatformResult = await PlatformService.DeletePlatform(CancellationToken, platform.Id);
        if (deletePlatformResult.IsSucceed)
        {
            Snackbar.Add($"La paltform {simpleElement.Name} a bien été supprimée.", Severity.Success);
            PlatformDtos.Remove(platform);
        }
    }

    private async Task AddPlatform()
    {
        var parameters = new DialogParameters<TextInputDialog>
        {
            { x => x.ContentText, $"Création d'une platforme" },
            { x => x.Label, "Plateforme" }
        };
        var dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = await DialogService.ShowAsync<TextInputDialog>("Création", parameters, dialogOptions);
        var response = await dialogReference.Result;

        if (!response!.Canceled)
        {
            var platform = (string)response.Data!;
            var createCategoryResult = await PlatformService.CreatePlatform(CancellationToken, platform);
            if (createCategoryResult.IsSucceed)
            {
                Snackbar.Add($"La plateforme {platform} a bien été crée.", Severity.Success);
                await LoadPlatforms();
            }
        }
    }

    private PlatformDto FindPlatform(SimpleTableElement simpleTableElement) => PlatformDtos.First(sg => sg.Id == simpleTableElement.Id);
}