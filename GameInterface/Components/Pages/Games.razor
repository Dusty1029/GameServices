@page "/"
@page "/games"
@inject IGameService GameService
@inject ICategoryService CategoryService
@inject IPlatformService PlatformService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudTable ServerData="SearchGames" Hover="true" Striped="true" Loading="@_loading" LoadingProgressColor="Color.Info" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Mes jeux</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            Nom
            <MudTextField T="string" Immediate="true" ValueChanged="OnSearchGameChanged" Placeholder="Final Fantasy"></MudTextField>
        </MudTh>
        <MudTh>
            Platform
            <MudSelect T="PlatformDto" Clearable="true" ValueChanged="OnPlatformChanged" Placeholder="PS1">
                @foreach (var platform in _platforms)
                {
                    <MudSelectItem Value="@platform">@platform.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTh>
        <MudTh>
            Catégories
            <MudSelect T="CategoryDto" Clearable="true" Placeholder="RPG" MultiSelection="true" SelectedValuesChanged="OnSelectedCategoriesChanged">
                @foreach (var category in _categories)
                {
                    <MudSelectItem Value="@category">@category.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nom">@context.Name</MudTd>
        <MudTd DataLabel="Platform">@context.Platform</MudTd>
        <MudTd DataLabel="Catégories">@String.Join(", ", context.Categories?.Select(c => c.Name) ?? [])</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(_) => DeleteGameById(context)" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Jeux par page: "  AllItemsText="coucou"/>
    </PagerContent>
</MudTable>


@code {
    private IEnumerable<GameDto> _gameDtos = [];
    private List<CategoryDto> _categories = [];
    private List<PlatformDto> _platforms = [];
    private IEnumerable<Guid> _selectedCategories = [];
    private Guid? _selectedPlatforms;
    private MudTable<GameDto>? _table;
    private bool _loading;
    private string _searchGame = "";
    private string _rowPerPage = "Jeux par page: ";
    private DialogOptions? _deleteDialogOptions;

    protected override async Task OnInitializedAsync()
    {
        _deleteDialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        var categories = CategoryService.GetAllCategories();
        var platforms = PlatformService.GetAllPlatforms();

        await Task.WhenAll(categories, platforms);

        _categories = categories.Result;
        _platforms = platforms.Result;
    }

    private async Task<TableData<GameDto>> SearchGames(TableState state, CancellationToken token)
    {
        var games = await GameService.SearchGame(new()
        {
            Page = ++state.Page,
            Size = state.PageSize,
            Name = _searchGame,
            PlatformId = _selectedPlatforms,
            CategoriesId = _selectedCategories.ToList()
        });

        return new() { TotalItems = games.TotalItems, Items = games.Items };
    }

    private void OnPlatformChanged(PlatformDto platform)
    {
        _selectedPlatforms = platform?.Id;
        ReloadData();
    }

    private void OnSelectedCategoriesChanged(IEnumerable<CategoryDto> categoryIds)
    {
        _selectedCategories = categoryIds.Select(c => c.Id);
        ReloadData();
    }

    private void OnSearchGameChanged(string searchGame)
    {
        _searchGame = searchGame;
        ReloadData();
    }

    private void ReloadData()
    {
        _table?.ReloadServerData();
    }

    private async Task DeleteGameById(GameDto game)
    {
        var parameters = new DialogParameters<CustomDialog>
        {
            { x => x.ContentText, $"Êtes-vous sûr de vouloir supprimer le jeu {game.Name} ?" },
            { x => x.ActionButtonText, "Supprimer" },
            { x => x.Color, Color.Error }
        };
        var dialogReference = await DialogService.ShowAsync<CustomDialog>("Suppression", parameters, _deleteDialogOptions);
        var response = await dialogReference.Result;

        if (!response!.Canceled)
        {
            await GameService.DeleteGameById(game.Id);
            Snackbar.Add($"Le jeu {game.Name} a bien été supprimé.", Severity.Success);
            ReloadData();
        }
    }
}
