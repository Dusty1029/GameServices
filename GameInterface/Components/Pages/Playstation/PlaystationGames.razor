@page "/playstationGames"

@inject IPlaystationService PlaystationService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@if(!IsTokenValid)
{
    <MudPaper>
        <MudTextField Class="pa-2" @bind-Value="Npsso" Immediate="true" Label="Npsso" />
        <div class="pa-2 d-flex align-center justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="RefreshToken">Refresh token</MudButton>
        </div>
    </MudPaper>
}

<GamesToLoadTableComponent Options="SimpleGamesComponentOptions"
                      Games="SimpleGames"
                      LoadGame="LoadPlaystationGames"
                      AddGame="AddPlaystationGame"
                      IgnoreGame="IgnorePlaystationGame">
</GamesToLoadTableComponent>


@code {
    private List<SimpleGame> SimpleGames { get; set; } = [];
    private List<PlaystationGameDto> PlaystationGameDtos { get; set; } = [];
    private SimpleGamesComponentOptions SimpleGamesComponentOptions { get; set; } = new()
    {
        Title = "Jeux playstation à récupérer",
        HasColumnPlatform = true
    };
    private string Npsso { get; set; } = string.Empty;
    private bool IsTokenValid { get; set; } = true;

    private async Task LoadPlaystationGames()
    {
        var getMissingPlaystationGamesResult = await PlaystationService.GetMissingPlaystationGames(CancellationToken);
        if (getMissingPlaystationGamesResult.IsSucceed)
        {
            PlaystationGameDtos = getMissingPlaystationGamesResult.Result!;
            SimpleGames = PlaystationGameDtos.Select(sg => sg.ToGameLoader()).ToList();
        }
        else if (getMissingPlaystationGamesResult.HttpStatusCode == HttpStatusCode.Unauthorized)
        {
            IsTokenValid = false;
        }
    }

    private async Task AddPlaystationGame(CreateSimpleGame playstationGame)
    {
        var playstationGameDto = FindPlaystationGame(playstationGame.Game);
        var addPlaystationGameResult = await PlaystationService.AddPlaystationGame(CancellationToken, new CreatePlaystationGameDto 
        { 
            GameId = playstationGame.GameToLoad?.Game?.Id,
            Serie = playstationGame.GameToLoad?.Serie,
            Categories = playstationGame.GameToLoad?.Categories,
            PlaystationGame = playstationGameDto 
        });
        if (addPlaystationGameResult.IsSucceed)
        {
            Snackbar.Add($"Le jeu {playstationGame.Game.Name} a bien été ajouté à votre bibliothèque.", Severity.Success);
            PlaystationGameDtos.Remove(playstationGameDto);
        }
        else if (addPlaystationGameResult.HttpStatusCode == HttpStatusCode.Unauthorized)
        {
            IsTokenValid = false;
        }
    }

    private async Task IgnorePlaystationGame(SimpleGame playstationGame)
    {
        var playstationGameDto = FindPlaystationGame(playstationGame);
        var ignorePlaystationGameResult = await PlaystationService.IgnorePlaystationGame(CancellationToken, playstationGameDto, true);
        if (ignorePlaystationGameResult.IsSucceed)
        {
            Snackbar.Add($"Le jeu {playstationGame.Name} a bien été ignoré.", Severity.Success);
            PlaystationGameDtos.Remove(playstationGameDto);
        }
        else if (ignorePlaystationGameResult.HttpStatusCode == HttpStatusCode.Unauthorized)
        {
            IsTokenValid = false;
        }
    }

    private async Task RefreshToken()
    {
        var refreshTokenResponse = await PlaystationService.RefreshToken(CancellationToken, Npsso);
        if (refreshTokenResponse.IsSucceed)
        {
            IsTokenValid = true;
            NavigationManager.ReloadPage();
        }
    }

    private PlaystationGameDto FindPlaystationGame(SimpleGame gameLoader) => PlaystationGameDtos.First(sg => sg.PlaystationId == gameLoader.Id);
}
