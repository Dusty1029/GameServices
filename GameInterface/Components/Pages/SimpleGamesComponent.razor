@inject IDialogService DialogService

<MudTable Items="@Games" Hover="true" Striped="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<SimpleGame,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Options.Title</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            Nom
            <MudTextField T="string" @bind-Value="@_searchGame" Immediate="true" Placeholder="Final Fantasy"></MudTextField>
        </MudTh>
        @if (Options.HasColumnPlatform)
        {
            <MudTh>
                Platform
            </MudTh>
        }
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nom">@context.Name</MudTd>
        @if (Options.HasColumnPlatform)
        {
            <MudTd DataLabel="Platform">@context.Platform</MudTd>
        }
        <MudTd>
            <MudTooltip Text="Ajouter à la bibliothèque">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="(_) => InvokeAddGame(context)" />
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudTooltip Text="Ignorer">
                <MudIconButton Icon="@Icons.Material.Filled.VideogameAssetOff" OnClick="(_) => InvokeIgnoreGame(context)" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Parameter]
    public List<SimpleGame> Games { get; set; } = [];
    [Parameter]
    public required SimpleGamesComponentOptions Options { get; set; }
    [Parameter]
    public EventCallback<CreateSimpleGame> AddGame { get; set; }
    [Parameter]
    public EventCallback<SimpleGame> IgnoreGame { get; set; }
    [Parameter]
    public EventCallback LoadGame { get; set; }

    private DialogOptions DialogOptions { get; set; } = new() 
    { 
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraSmall
    };
    private bool _loading;
    private string _searchGame = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadGame.InvokeAsync();
        _loading = false;
    }

    private async Task InvokeAddGame(SimpleGame game)
    {
        var dialogParameters = new DialogParameters<SelectGameDialog>
        {
            { x => x.ContentText, $"Vous pouvez choisir un jeu existant pour {game.Name}" },
            { x => x.PlatformEnum, game.Platform }
        };
        var dialogReference = await DialogService.ShowAsync<SelectGameDialog>("Ajout", dialogParameters, DialogOptions);
        var response = await dialogReference.Result;
        if (!response!.Canceled)
        {
            var gameId = (Guid?)response.Data;
            await AddGame.InvokeAsync(new CreateSimpleGame { GameId = gameId, Game = game });
            Games.Remove(game);
        }
    }

    private async Task InvokeIgnoreGame(SimpleGame game)
    {
        await IgnoreGame.InvokeAsync(game);
        Games.Remove(game);
    }

    private bool FilterFunc(SimpleGame game)
    {
        if (string.IsNullOrWhiteSpace(_searchGame))
            return true;
        if (game.Name.Contains(_searchGame, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
