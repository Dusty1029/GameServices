@inject IGameService GameService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText>@ContentText</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="SimpleGameDto" Label="Jeux" @bind-Value="_game" Search SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Ajouter</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string ContentText { get; set; } = string.Empty;
    [Parameter]
    public PlatformEnumDto? PlatformEnum  { get; set; }

    private SimpleGameDto? _game;

    private async Task<IEnumerable<SimpleGameDto>> Search(string value, CancellationToken token)
    {
        var searchSimpleGameResult = await GameService.SearchSimpleGame(value, PlatformEnum);
        if (searchSimpleGameResult.IsSucceed)
            return searchSimpleGameResult.Result!;

        return [];
    }

    private void Submit() => MudDialog?.Close(DialogResult.Ok(_game?.Id));

    private void Cancel() => MudDialog?.Cancel();
}