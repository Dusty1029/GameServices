@page "/steamGames"
@inject ISteamService SteamService
@inject ISnackbar Snackbar

<SimpleGamesComponent Options="SimpleGamesComponentOptions"
    Games="SimpleGames"
    LoadGame="LoadSteamGames"
    AddGame="AddSteamGame"
    IgnoreGame="IgnoreSteamGame">
</SimpleGamesComponent>


@code {
    private List<SimpleGame> SimpleGames { get; set; } = [];
    private List<SteamGameDto> SteamGameDtos { get; set; } = [];
    private SimpleGamesComponentOptions SimpleGamesComponentOptions { get; set; } = new()
    {
        Title = "Jeux steam à récupérer",
        HasColumnPlatform = false
    };

    private async Task LoadSteamGames()
    {
        var getMissingSteamGamesResult = await SteamService.GetMissingSteamGames();
        if (getMissingSteamGamesResult.IsSucceed)
        {
            SteamGameDtos = getMissingSteamGamesResult.Result!;
            SimpleGames = SteamGameDtos.Select(sg => sg.ToGameLoader()).ToList();
        }
    }

    private async Task AddSteamGame(CreateSimpleGame steamGame)
    {
        var steamGameDto = FindSteamGame(steamGame.Game);
        var addSteamGameResult = await SteamService.AddSteamGame(new CreateSteamGameDto { GameId = steamGame.GameId, SteamGame = steamGameDto });
        if (addSteamGameResult.IsSucceed)
        {
            Snackbar.Add($"Le jeu {steamGame.Game.Name} a bien été ajouté à votre bibliothèque.", Severity.Success);
            SteamGameDtos.Remove(steamGameDto);
        }
    }

    private async Task IgnoreSteamGame(SimpleGame steamGame)
    {
        var steamGameDto = FindSteamGame(steamGame);
        var ignoreSteamGameResult = await SteamService.IgnoreSteamGame(steamGameDto, true);
        if (ignoreSteamGameResult.IsSucceed)
        {
            Snackbar.Add($"Le jeu {steamGame.Name} a bien été ignoré.", Severity.Success);
            SteamGameDtos.Remove(steamGameDto);
        }
    }

    private SteamGameDto FindSteamGame(SimpleGame gameLoader) => SteamGameDtos.First(sg => sg.SteamId == int.Parse(gameLoader.Id));
}
